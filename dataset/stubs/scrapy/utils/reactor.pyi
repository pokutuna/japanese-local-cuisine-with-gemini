from asyncio import AbstractEventLoop, AbstractEventLoopPolicy
from scrapy.exceptions import ScrapyDeprecationWarning as ScrapyDeprecationWarning
from scrapy.utils.misc import load_object as load_object
from twisted.internet.base import DelayedCall as DelayedCall
from typing import Any, Callable, Optional

def listen_tcp(portrange, host, factory): ...

class CallLaterOnce:
    def __init__(self, func: Callable, *a: Any, **kw: Any) -> None: ...
    def schedule(self, delay: float = 0) -> None: ...
    def cancel(self) -> None: ...
    def __call__(self) -> Any: ...

def set_asyncio_event_loop_policy() -> None: ...
def get_asyncio_event_loop_policy() -> AbstractEventLoopPolicy: ...
def install_reactor(reactor_path: str, event_loop_path: Optional[str] = None) -> None: ...
def set_asyncio_event_loop(event_loop_path: Optional[str]) -> AbstractEventLoop: ...
def verify_installed_reactor(reactor_path: str) -> None: ...
def verify_installed_asyncio_event_loop(loop_path: str) -> None: ...
def is_asyncio_reactor_installed() -> bool: ...
