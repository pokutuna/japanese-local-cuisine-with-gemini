from _typeshed import Incomplete
from asyncio import Future
from scrapy.exceptions import IgnoreRequest as IgnoreRequest
from scrapy.utils.reactor import is_asyncio_reactor_installed as is_asyncio_reactor_installed
from twisted.internet.defer import Deferred
from twisted.python.failure import Failure as Failure
from typing import Any, AsyncGenerator, AsyncIterable, Callable, Coroutine, Generator, Iterable, Iterator, Union, overload

def defer_fail(_failure: Failure) -> Deferred: ...
def defer_succeed(result: Any) -> Deferred: ...
def defer_result(result: Any) -> Deferred: ...
def mustbe_deferred(f: Callable, *args: Any, **kw: Any) -> Deferred: ...
def parallel(iterable: Iterable, count: int, callable: Callable, *args: Any, **named: Any) -> Deferred: ...

class _AsyncCooperatorAdapter(Iterator):
    aiterator: Incomplete
    callable: Incomplete
    callable_args: Incomplete
    callable_kwargs: Incomplete
    finished: bool
    waiting_deferreds: Incomplete
    anext_deferred: Incomplete
    def __init__(self, aiterable: AsyncIterable, callable: Callable, *callable_args: Any, **callable_kwargs: Any) -> None: ...
    def __next__(self) -> Deferred: ...

def parallel_async(async_iterable: AsyncIterable, count: int, callable: Callable, *args: Any, **named: Any) -> Deferred: ...
def process_chain(callbacks: Iterable[Callable], input: Any, *a: Any, **kw: Any) -> Deferred: ...
def process_chain_both(callbacks: Iterable[Callable], errbacks: Iterable[Callable], input: Any, *a: Any, **kw: Any) -> Deferred: ...
def process_parallel(callbacks: Iterable[Callable], input: Any, *a: Any, **kw: Any) -> Deferred: ...
def iter_errback(iterable: Iterable, errback: Callable, *a: Any, **kw: Any) -> Generator: ...
async def aiter_errback(aiterable: AsyncIterable, errback: Callable, *a: Any, **kw: Any) -> AsyncGenerator: ...
@overload
def deferred_from_coro(o: _CT) -> Deferred: ...
@overload
def deferred_from_coro(o: _T) -> _T: ...
def deferred_f_from_coro_f(coro_f: Callable[..., Coroutine]) -> Callable: ...
def maybeDeferred_coro(f: Callable, *args: Any, **kw: Any) -> Deferred: ...
def deferred_to_future(d: Deferred) -> Future: ...
def maybe_deferred_to_future(d: Deferred) -> Union[Deferred, Future]: ...
