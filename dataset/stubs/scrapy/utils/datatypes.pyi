import collections
import weakref
from _typeshed import Incomplete
from scrapy.exceptions import ScrapyDeprecationWarning as ScrapyDeprecationWarning
from typing import Any, AnyStr, Optional, OrderedDict, Sequence

class CaselessDict(dict):
    def __new__(cls, *args, **kwargs): ...
    def __init__(self, seq: Incomplete | None = None) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __contains__(self, key) -> bool: ...
    has_key = __contains__
    def __copy__(self): ...
    copy = __copy__
    def normkey(self, key): ...
    def normvalue(self, value): ...
    def get(self, key, def_val: Incomplete | None = None): ...
    def setdefault(self, key, def_val: Incomplete | None = None): ...
    def update(self, seq) -> None: ...
    @classmethod
    def fromkeys(cls, keys, value: Incomplete | None = None): ...
    def pop(self, key, *args): ...

class CaseInsensitiveDict(collections.UserDict):
    def __init__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, key: AnyStr) -> Any: ...
    def __setitem__(self, key: AnyStr, value: Any) -> None: ...
    def __delitem__(self, key: AnyStr) -> None: ...
    def __contains__(self, key: AnyStr) -> bool: ...

class LocalCache(OrderedDict[_KT, _VT]):
    limit: Incomplete
    def __init__(self, limit: Optional[int] = None) -> None: ...
    def __setitem__(self, key: _KT, value: _VT) -> None: ...

class LocalWeakReferencedCache(weakref.WeakKeyDictionary):
    data: Incomplete
    def __init__(self, limit: Optional[int] = None) -> None: ...
    def __setitem__(self, key: _KT, value: _VT) -> None: ...
    def __getitem__(self, key: _KT) -> Optional[_VT]: ...

class SequenceExclude:
    seq: Incomplete
    def __init__(self, seq: Sequence) -> None: ...
    def __contains__(self, item: Any) -> bool: ...
