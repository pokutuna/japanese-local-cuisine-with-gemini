from _typeshed import Incomplete
from scrapy.utils.datatypes import LocalCache as LocalCache
from twisted.internet.base import ThreadedResolver
from typing import Any

dnscache: LocalCache[str, Any]

class CachingThreadedResolver(ThreadedResolver):
    timeout: Incomplete
    def __init__(self, reactor, cache_size, timeout) -> None: ...
    @classmethod
    def from_crawler(cls, crawler, reactor): ...
    def install_on_reactor(self) -> None: ...
    def getHostByName(self, name: str, timeout: Incomplete | None = None): ...

class HostResolution:
    name: Incomplete
    def __init__(self, name) -> None: ...
    def cancel(self) -> None: ...

class _CachingResolutionReceiver:
    resolutionReceiver: Incomplete
    hostName: Incomplete
    addresses: Incomplete
    def __init__(self, resolutionReceiver, hostName) -> None: ...
    resolution: Incomplete
    def resolutionBegan(self, resolution) -> None: ...
    def addressResolved(self, address) -> None: ...
    def resolutionComplete(self) -> None: ...

class CachingHostnameResolver:
    reactor: Incomplete
    original_resolver: Incomplete
    def __init__(self, reactor, cache_size) -> None: ...
    @classmethod
    def from_crawler(cls, crawler, reactor): ...
    def install_on_reactor(self) -> None: ...
    def resolveHostName(self, resolutionReceiver, hostName: str, portNumber: int = 0, addressTypes: Incomplete | None = None, transportSemantics: str = 'TCP'): ...
