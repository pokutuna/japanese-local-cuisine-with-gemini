from _typeshed import Incomplete
from scrapy.crawler import Crawler as Crawler
from scrapy.http.request import Request as Request
from scrapy.settings import BaseSettings as BaseSettings
from scrapy.spiders import Spider as Spider
from scrapy.utils.deprecate import ScrapyDeprecationWarning as ScrapyDeprecationWarning
from scrapy.utils.job import job_dir as job_dir
from scrapy.utils.request import RequestFingerprinter as RequestFingerprinter, RequestFingerprinterProtocol as RequestFingerprinterProtocol, referer_str as referer_str
from twisted.internet.defer import Deferred as Deferred
from typing import Optional
from typing_extensions import Self

class BaseDupeFilter:
    @classmethod
    def from_settings(cls, settings: BaseSettings) -> Self: ...
    def request_seen(self, request: Request) -> bool: ...
    def open(self) -> Optional[Deferred]: ...
    def close(self, reason: str) -> Optional[Deferred]: ...
    def log(self, request: Request, spider: Spider) -> None: ...

class RFPDupeFilter(BaseDupeFilter):
    file: Incomplete
    fingerprinter: Incomplete
    fingerprints: Incomplete
    logdupes: bool
    debug: Incomplete
    logger: Incomplete
    def __init__(self, path: Optional[str] = None, debug: bool = False, *, fingerprinter: Optional[RequestFingerprinterProtocol] = None) -> None: ...
    @classmethod
    def from_settings(cls, settings: BaseSettings, *, fingerprinter: Optional[RequestFingerprinterProtocol] = None) -> Self: ...
    @classmethod
    def from_crawler(cls, crawler: Crawler) -> Self: ...
    def request_seen(self, request: Request) -> bool: ...
    def request_fingerprint(self, request: Request) -> str: ...
    def close(self, reason: str) -> None: ...
    def log(self, request: Request, spider: Spider) -> None: ...
