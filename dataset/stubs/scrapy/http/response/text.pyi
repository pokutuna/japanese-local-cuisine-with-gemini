from _typeshed import Incomplete
from scrapy.http import Request as Request
from scrapy.http.response import Response as Response
from scrapy.selector import Selector as Selector
from scrapy.utils.python import memoizemethod_noargs as memoizemethod_noargs, to_unicode as to_unicode
from scrapy.utils.response import get_base_url as get_base_url
from typing import Any, Generator, Tuple

class TextResponse(Response):
    attributes: Tuple[str, ...]
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @property
    def encoding(self): ...
    def json(self): ...
    @property
    def text(self) -> str: ...
    def urljoin(self, url): ...
    @property
    def selector(self): ...
    def jmespath(self, query, **kwargs): ...
    def xpath(self, query, **kwargs): ...
    def css(self, query): ...
    def follow(self, url, callback: Incomplete | None = None, method: str = 'GET', headers: Incomplete | None = None, body: Incomplete | None = None, cookies: Incomplete | None = None, meta: Incomplete | None = None, encoding: Incomplete | None = None, priority: int = 0, dont_filter: bool = False, errback: Incomplete | None = None, cb_kwargs: Incomplete | None = None, flags: Incomplete | None = None) -> Request: ...
    def follow_all(self, urls: Incomplete | None = None, callback: Incomplete | None = None, method: str = 'GET', headers: Incomplete | None = None, body: Incomplete | None = None, cookies: Incomplete | None = None, meta: Incomplete | None = None, encoding: Incomplete | None = None, priority: int = 0, dont_filter: bool = False, errback: Incomplete | None = None, cb_kwargs: Incomplete | None = None, flags: Incomplete | None = None, css: Incomplete | None = None, xpath: Incomplete | None = None) -> Generator[Request, None, None]: ...

class _InvalidSelector(ValueError): ...
