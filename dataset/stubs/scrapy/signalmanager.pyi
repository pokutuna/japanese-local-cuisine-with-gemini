from _typeshed import Incomplete
from twisted.internet.defer import Deferred as Deferred
from typing import Any, List, Tuple

class SignalManager:
    sender: Incomplete
    def __init__(self, sender: Any = ...) -> None: ...
    def connect(self, receiver: Any, signal: Any, **kwargs: Any) -> None: ...
    def disconnect(self, receiver: Any, signal: Any, **kwargs: Any) -> None: ...
    def send_catch_log(self, signal: Any, **kwargs: Any) -> List[Tuple[Any, Any]]: ...
    def send_catch_log_deferred(self, signal: Any, **kwargs: Any) -> Deferred: ...
    def disconnect_all(self, signal: Any, **kwargs: Any) -> None: ...
